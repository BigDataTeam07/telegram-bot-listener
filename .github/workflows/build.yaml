name: Build and Push Docker Image

on:
  push:
    branches: [ release ]
    paths:
      - 'src/**'
      - 'build.gradle.kts'
      - 'Dockerfile'
      - '.github/workflows/build.yml'
  workflow_dispatch:  # Allows manual triggering

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: amazon-music-review/telegram-bot-listener
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '22'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as latest for convenience
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Trigger Jenkins Deployment Job
        uses: wei/curl@v1
        with:
          args: -X POST ${{ secrets.JENKINS_WEBHOOK_URL }} --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }} --data-urlencode "IMAGE_TAG=${{ github.sha }}"