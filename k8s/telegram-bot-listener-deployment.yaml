apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegram-bot-listener
  namespace: service-ns
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1 # only one instance allowed
  selector:
    matchLabels:
      app: telegram-bot-listener
  template:
    metadata:
      labels:
        app: telegram-bot-listener
    spec:
      containers:
        - name: telegram-bot-listener
          image: 119002862962.dkr.ecr.ap-southeast-1.amazonaws.com/amazon-music-review/telegram-bot-listener:${GITHUB_SHA}
          imagePullPolicy: Always
          env:
            - name: TELEGRAM_BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: telegram-bot-credentials
                  key: telegram-bot-token
            - name: TELEGRAM_BOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: telegram-bot-credentials
                  key: telegram-bot-username
            - name: KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-sasl-secret
                  key: password
            - name: KAFKA_SASL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: kafka-sasl-secret
                  key: username
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                secretKeyRef:
                  name: kafka-bootstrap-servers
                  key: bootstrap-servers
            - name: KAFKA_TOPIC
              value: "social-media-topic"
            # Add Elasticsearch URL environment variable
            - name: ELASTICSEARCH_URL
              value: "http://elasticsearch.elk-ns.svc.cluster.local:9200"
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: telegram-bot-listener-service
  namespace: service-ns
spec:
  selector:
    app: telegram-bot-listener
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP # HTTP command service